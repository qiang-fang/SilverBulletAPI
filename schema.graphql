enum StatusType {
  ToDo
  InProgress
  Done
}

type Ticket {
  _id: ID!
  id: Int!
  dashboardId: Int!
  status: StatusType!
  title: String! 
  owner: String
  priority: Int!
  created: GraphQLDate!
  due: GraphQLDate
  description: String
}

type TicketCounts {
  ToDo: Int
  InProgress: Int
  Done: Int
}

type User {
  signedIn: Boolean!
  givenName: String
  name: String
  email: String
}

scalar GraphQLDate

# define this new input type called TicketInputs in the schema
"Toned down Ticket, used as inputs, without server generated values."
input TicketInputs {
  title: String!
  status: StatusType = ToDo
  owner: String
  priority: Int
  due: GraphQLDate
  description: String
}

"""Inputs for ticketUpdate: all are optional. Whichever is specified will
be set to the given value, undefined fields will remain unmodified."""
input TicketUpdateInputs {
  title: String
  status: StatusType
  owner: String
  priority: Int
  due: GraphQLDate
  description: String
}

##### top level declarations

type Query {
  about: String!
  user: User!
  backlog:[Ticket!]!
  ticket(id: Int!): Ticket!
  ticketCounts(
    status: StatusType
  ): [TicketCounts!]!
}
type Mutation {
  setAboutMessage(message: String!): String
  ticketAdd(ticket: TicketInputs!): Ticket!
  ticketUpdate(id: Int!, changes: TicketUpdateInputs!): Ticket!
  ticketDelete(id: Int!): Boolean!
  ticketRestore(id: Int!): Boolean!
}
